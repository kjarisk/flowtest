{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","../src/index.js"],"names":["title","_","html","text","prompt","choices","index","window","App","start","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;AAoBA,MAAM,UAAU,GAAG,IAAI,OAAJ,EAAnB;AAIA;;;;;;;;;;;;;;;;;;;;;AAoBO,MAAM,SAAS,GAAwB,CAArB,IACpB,CAAC,GAAG,IAAJ,KAAmB;AAClB,QAAM,CAAC,GAAG,CAAC,CAAC,GAAG,IAAJ,CAAX;AACA,EAAA,UAAU,CAAC,GAAX,CAAe,CAAf,EAAkB,IAAlB;AACA,SAAO,CAAP;AACD,CALE;;;;AAOA,MAAM,WAAW,GAAI,CAAD,IACvB,OAAO,CAAP,KAAa,UAAb,IAA2B,UAAU,CAAC,GAAX,CAAe,CAAf,CADxB;;;;;;;;;;;ACnDP;;;;;;;;;;;;;;AAcA;;;;AAIA;;;AAGO,MAAM,YAAY,GAAG,MAAM,CAAC,cAAP,KAA0B,SAA1B,IACvB,MAAM,CAAC,cAAP,CAA8B,yBAA9B,KAA4D,SAD1D;AAGP;;;;;;;;;AAMO,MAAM,aAAa,GACtB,CAAC,SAAD,EACC,KADD,EAEC,GAAA,GAAiB,IAFlB,EAGC,MAAA,GAAoB,IAHrB,KAGmC;AACjC,MAAI,IAAI,GAAG,KAAX;;AACA,SAAO,IAAI,KAAK,GAAhB,EAAqB;AACnB,UAAM,CAAC,GAAG,IAAK,CAAC,WAAhB;AACA,IAAA,SAAS,CAAC,YAAV,CAAuB,IAAvB,EAA8B,MAA9B;AACA,IAAA,IAAI,GAAG,CAAP;AACD;AACF,CAXE;AAaP;;;;;;;;AAIO,MAAM,WAAW,GACpB,CAAC,SAAD,EAAkB,SAAlB,EAAwC,OAAA,GAAqB,IAA7D,KACW;AACL,MAAI,IAAI,GAAG,SAAX;;AACA,SAAO,IAAI,KAAK,OAAhB,EAAyB;AACvB,UAAM,CAAC,GAAG,IAAK,CAAC,WAAhB;AACA,IAAA,SAAS,CAAC,WAAV,CAAsB,IAAtB;AACA,IAAA,IAAI,GAAG,CAAP;AACD;AACF,CATF;;;;;;;;;;;AC/CP;;;;;;;;;;;;;;AAqCA;;;;AAIO,MAAM,QAAQ,GAAG,EAAjB;AAEP;;;;;AAGO,MAAM,OAAO,GAAG,EAAhB;;;;;;;;;;AC9CP;;;;;;;;;;;;;;AAoBA;;;;AAIO,MAAM,MAAM,GAAG,SAAS,MAAM,CAAC,IAAI,CAAC,MAAL,EAAD,CAAN,CAAsB,KAAtB,CAA4B,CAA5B,CAA8B,IAAtD;AAEP;;;;;;AAIO,MAAM,UAAU,GAAG,OAAO,MAAM,KAAhC;;AAEA,MAAM,WAAW,GAAG,IAAI,MAAJ,CAAW,GAAG,MAAM,IAAI,UAAU,EAAlC,CAApB;AAEP;;;;;AAGO,MAAM,oBAAoB,GAAG,OAA7B;AAEP;;;;;;AAGM,MAAO,QAAP,CAAe;AAInB,EAAA,WAAA,CAAY,MAAZ,EAAoC,OAApC,EAAgE;AAHhE,SAAA,KAAA,GAAwB,EAAxB;AAIE,SAAK,OAAL,GAAe,OAAf;AACA,QAAI,KAAK,GAAG,CAAC,CAAb;AACA,QAAI,SAAS,GAAG,CAAhB;AACA,UAAM,aAAa,GAAW,EAA9B;;AACA,UAAM,gBAAgB,GAAI,QAAD,IAAkC;AACzD,YAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB,CADyD,CAEzD;AACA;;AACA,YAAM,MAAM,GAAG,QAAQ,CAAC,gBAAT,CACX,OADW,EAEX;AAAI;AAFO,QAGX,IAHW,EAIX,KAJW,CAAf,CAJyD,CASzD;AACA;AACA;;AACA,UAAI,aAAa,GAAG,CAApB;;AACA,aAAO,MAAM,CAAC,QAAP,EAAP,EAA0B;AACxB,QAAA,KAAK;AACL,cAAM,IAAI,GAAG,MAAM,CAAC,WAApB;;AACA,YAAI,IAAI,CAAC,QAAL,KAAkB;AAAE;AAAxB,UAAiD;AAC/C,gBAAK,IAAgB,CAAC,aAAjB,EAAL,EAAuC;AACrC,oBAAM,UAAU,GAAI,IAAgB,CAAC,UAArC,CADqC,CAErC;AACA;AACA;AACA;AACA;;AACA,kBAAI,KAAK,GAAG,CAAZ;;AACA,mBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,oBAAI,UAAU,CAAC,CAAD,CAAV,CAAc,KAAd,CAAoB,OAApB,CAA4B,MAA5B,KAAuC,CAA3C,EAA8C;AAC5C,kBAAA,KAAK;AACN;AACF;;AACD,qBAAO,KAAK,KAAK,CAAjB,EAAoB;AAClB;AACA;AACA,sBAAM,aAAa,GAAG,MAAM,CAAC,OAAP,CAAe,SAAf,CAAtB,CAHkB,CAIlB;;AACA,sBAAM,IAAI,GAAG,sBAAsB,CAAC,IAAvB,CAA4B,aAA5B,EAA4C,CAA5C,CAAb,CALkB,CAMlB;AACA;AACA;AACA;AACA;;AACA,sBAAM,mBAAmB,GACrB,IAAI,CAAC,WAAL,KAAqB,oBADzB;AAEA,sBAAM,cAAc,GACf,IAAgB,CAAC,YAAjB,CAA8B,mBAA9B,CADL;AAEA,sBAAM,OAAO,GAAG,cAAc,CAAC,KAAf,CAAqB,WAArB,CAAhB;AACA,qBAAK,KAAL,CAAW,IAAX,CAAgB;AAAC,kBAAA,IAAI,EAAE,WAAP;AAAoB,kBAAA,KAApB;AAA2B,kBAAA,IAA3B;AAAiC,kBAAA;AAAjC,iBAAhB;AACC,gBAAA,IAAgB,CAAC,eAAjB,CAAiC,mBAAjC;AACD,gBAAA,SAAS,IAAI,OAAO,CAAC,MAAR,GAAiB,CAA9B;AACD;AACF;;AACD,gBAAK,IAAgB,CAAC,OAAjB,KAA6B,UAAlC,EAA8C;AAC5C,cAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,WAtCD,MAsCO,IAAI,IAAI,CAAC,QAAL,KAAkB;AAAE;AAAxB,UAA8C;AACnD,kBAAM,IAAI,GAAI,IAAa,CAAC,IAA5B;;AACA,gBAAI,IAAI,CAAC,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,oBAAM,MAAM,GAAG,IAAI,CAAC,UAApB;AACA,oBAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,WAAX,CAAhB;AACA,oBAAM,SAAS,GAAG,OAAO,CAAC,MAAR,GAAiB,CAAnC,CAH6B,CAI7B;AACA;;AACA,mBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,gBAAA,MAAM,CAAC,YAAP,CACK,OAAO,CAAC,CAAD,CAAP,KAAe,EAAhB,GAAsB,YAAY,EAAlC,GACsB,QAAQ,CAAC,cAAT,CAAwB,OAAO,CAAC,CAAD,CAA/B,CAF1B,EAGI,IAHJ;AAIA,qBAAK,KAAL,CAAW,IAAX,CAAgB;AAAC,kBAAA,IAAI,EAAE,MAAP;AAAe,kBAAA,KAAK,EAAE,EAAE;AAAxB,iBAAhB;AACD,eAZ4B,CAa7B;AACA;;;AACA,kBAAI,OAAO,CAAC,SAAD,CAAP,KAAuB,EAA3B,EAA+B;AAC7B,gBAAA,MAAM,CAAC,YAAP,CAAoB,YAAY,EAAhC,EAAoC,IAApC;AACA,gBAAA,aAAa,CAAC,IAAd,CAAmB,IAAnB;AACD,eAHD,MAGO;AACJ,gBAAA,IAAa,CAAC,IAAd,GAAqB,OAAO,CAAC,SAAD,CAA5B;AACF,eApB4B,CAqB7B;;;AACA,cAAA,SAAS,IAAI,SAAb;AACD;AACF,WA1BM,MA0BA,IAAI,IAAI,CAAC,QAAL,KAAkB;AAAE;AAAxB,UAAiD;AACtD,gBAAK,IAAgB,CAAC,IAAjB,KAA0B,MAA/B,EAAuC;AACrC,oBAAM,MAAM,GAAG,IAAI,CAAC,UAApB,CADqC,CAErC;AACA;AACA;AACA;;AACA,kBAAI,IAAI,CAAC,eAAL,KAAyB,IAAzB,IAAiC,KAAK,KAAK,aAA/C,EAA8D;AAC5D,gBAAA,KAAK;AACL,gBAAA,MAAM,CAAC,YAAP,CAAoB,YAAY,EAAhC,EAAoC,IAApC;AACD;;AACD,cAAA,aAAa,GAAG,KAAhB;AACA,mBAAK,KAAL,CAAW,IAAX,CAAgB;AAAC,gBAAA,IAAI,EAAE,MAAP;AAAe,gBAAA;AAAf,eAAhB,EAXqC,CAYrC;AACA;;AACA,kBAAI,IAAI,CAAC,WAAL,KAAqB,IAAzB,EAA+B;AAC5B,gBAAA,IAAgB,CAAC,IAAjB,GAAwB,EAAxB;AACF,eAFD,MAEO;AACL,gBAAA,aAAa,CAAC,IAAd,CAAmB,IAAnB;AACA,gBAAA,KAAK;AACN;;AACD,cAAA,SAAS;AACV,aArBD,MAqBO;AACL,kBAAI,CAAC,GAAG,CAAC,CAAT;;AACA,qBAAO,CAAC,CAAC,GAAI,IAAgB,CAAC,IAAjB,CAAuB,OAAvB,CAA+B,MAA/B,EAAuC,CAAC,GAAG,CAA3C,CAAN,MACA,CAAC,CADR,EACW;AACT;AACA;AACA;AACA;AACA,qBAAK,KAAL,CAAW,IAAX,CAAgB;AAAC,kBAAA,IAAI,EAAE,MAAP;AAAe,kBAAA,KAAK,EAAE,CAAC;AAAvB,iBAAhB;AACD;AACF;AACF;AACF;AACF,KAnHD;;AAoHA,IAAA,gBAAgB,CAAC,OAAD,CAAhB,CAzH8D,CA0H9D;;;AACA,SAAK,MAAM,CAAX,IAAgB,aAAhB,EAA+B;AAC7B,MAAA,CAAC,CAAC,UAAF,CAAc,WAAd,CAA0B,CAA1B;AACD;AACF;;AAlIkB;;;;AA0Jd,MAAM,oBAAoB,GAAI,IAAD,IAAwB,IAAI,CAAC,KAAL,KAAe,CAAC,CAArE,EAEP;AACA;;;;;AACO,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,aAAT,CAAuB,EAAvB,CAA3B;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBO,MAAM,sBAAsB,GAC/B,4JADG;;;;;;;;;;ACjNP;;AAIA;;AAtBA;;;;;;;;;;;;;;AAcA;;;;AAUA;;;;AAIM,MAAO,gBAAP,CAAuB;AAM3B,EAAA,WAAA,CACI,QADJ,EACwB,SADxB,EAEI,OAFJ,EAE0B;AAP1B,SAAA,MAAA,GAAgC,EAAhC;AAQE,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,MAAM,CAAC,MAAD,EAAc;AAClB,QAAI,CAAC,GAAG,CAAR;;AACA,SAAK,MAAM,IAAX,IAAmB,KAAK,MAAxB,EAAgC;AAC9B,UAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,QAAA,IAAI,CAAC,QAAL,CAAc,MAAM,CAAC,CAAD,CAApB;AACD;;AACD,MAAA,CAAC;AACF;;AACD,SAAK,MAAM,IAAX,IAAmB,KAAK,MAAxB,EAAgC;AAC9B,UAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,QAAA,IAAI,CAAC,MAAL;AACD;AACF;AACF;;AAED,EAAA,MAAM,GAAA;AACJ;AACA;AACA;AACA;AACA;AACA,UAAM,QAAQ,GAAG,oBACb,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,CAA8B,SAA9B,CAAwC,IAAxC,CADa,GAEb,QAAQ,CAAC,UAAT,CAAoB,KAAK,QAAL,CAAc,OAAd,CAAsB,OAA1C,EAAmD,IAAnD,CAFJ;AAIA,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,KAA5B;AACA,QAAI,SAAS,GAAG,CAAhB;AACA,QAAI,SAAS,GAAG,CAAhB;;AACA,UAAM,gBAAgB,GAAI,QAAD,IAA+B;AACtD;AACA;AACA,YAAM,MAAM,GAAG,QAAQ,CAAC,gBAAT,CACX,QADW,EAEX;AAAI;AAFO,QAGX,IAHW,EAIX,KAJW,CAAf;AAKA,UAAI,IAAI,GAAG,MAAM,CAAC,QAAP,EAAX,CARsD,CAStD;;AACA,aAAO,SAAS,GAAG,KAAK,CAAC,MAAlB,IAA4B,IAAI,KAAK,IAA5C,EAAkD;AAChD,cAAM,IAAI,GAAG,KAAK,CAAC,SAAD,CAAlB,CADgD,CAEhD;AACA;AACA;AACA;AACA;AACA;;AACA,YAAI,CAAC,oCAAqB,IAArB,CAAL,EAAiC;AAC/B,eAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB;;AACA,UAAA,SAAS;AACV,SAHD,MAGO,IAAI,SAAS,KAAK,IAAI,CAAC,KAAvB,EAA8B;AACnC,cAAI,IAAI,CAAC,IAAL,KAAc,MAAlB,EAA0B;AACxB,kBAAM,IAAI,GAAG,KAAK,SAAL,CAAe,oBAAf,CAAoC,KAAK,OAAzC,CAAb;AACA,YAAA,IAAI,CAAC,eAAL,CAAqB,IAAI,CAAC,eAA1B;;AACA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD,WAJD,MAIO;AACL,iBAAK,MAAL,CAAY,IAAZ,CAAiB,GAAG,KAAK,SAAL,CAAe,0BAAf,CAChB,IADgB,EACC,IAAI,CAAC,IADN,EACY,IAAI,CAAC,OADjB,EAC0B,KAAK,OAD/B,CAApB;AAED;;AACD,UAAA,SAAS;AACV,SAVM,MAUA;AACL,UAAA,SAAS;;AACT,cAAI,IAAI,CAAC,QAAL,KAAkB,UAAtB,EAAkC;AAChC,YAAA,gBAAgB,CAAE,IAA4B,CAAC,OAA/B,CAAhB;AACD;;AACD,UAAA,IAAI,GAAG,MAAM,CAAC,QAAP,EAAP;AACD;AACF;AACF,KAvCD;;AAwCA,IAAA,gBAAgB,CAAC,QAAD,CAAhB;;AACA,QAAI,iBAAJ,EAAkB;AAChB,MAAA,QAAQ,CAAC,SAAT,CAAmB,QAAnB;AACA,MAAA,cAAc,CAAC,OAAf,CAAuB,QAAvB;AACD;;AACD,WAAO,QAAP;AACD;;AAxF0B;;;;;;;;;;;ACV7B;;AAEA;;AApBA;;;;;;;;;;;;;;AAcA;;;;AAQA;;;;AAIM,MAAO,cAAP,CAAqB;AAMzB,EAAA,WAAA,CACI,OADJ,EACmC,MADnC,EACkD,IADlD,EAEI,SAFJ,EAEgC;AAC9B,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;AAED;;;;;AAGA,EAAA,OAAO,GAAA;AACL,UAAM,QAAQ,GAAG,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAvC;AACA,QAAI,IAAI,GAAG,EAAX;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAApB,EAA8B,CAAC,EAA/B,EAAmC;AACjC,YAAM,CAAC,GAAG,KAAK,OAAL,CAAa,CAAb,CAAV,CADiC,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAM,KAAK,GAAG,iCAAuB,IAAvB,CAA4B,CAA5B,CAAd;;AACA,UAAI,KAAJ,EAAW;AACT;AACA;AACA;AACA,QAAA,IAAI,IAAI,CAAC,CAAC,MAAF,CAAS,CAAT,EAAY,KAAK,CAAC,KAAlB,IAA2B,KAAK,CAAC,CAAD,CAAhC,GAAsC,KAAK,CAAC,CAAD,CAA3C,GACJ,8BADI,GACmB,KAAK,CAAC,CAAD,CADxB,GAC8B,gBADtC;AAED,OAND,MAMO;AACL;AACA;AACA,QAAA,IAAI,IAAI,CAAC,GAAG,oBAAZ;AACD;AACF;;AACD,WAAO,IAAI,GAAG,KAAK,OAAL,CAAa,QAAb,CAAd;AACD;;AAED,EAAA,kBAAkB,GAAA;AAChB,UAAM,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAjB;AACA,IAAA,QAAQ,CAAC,SAAT,GAAqB,KAAK,OAAL,EAArB;AACA,WAAO,QAAP;AACD;;AApDwB;AAuD3B;;;;;;;;;;;AAOM,MAAO,iBAAP,SAAiC,cAAjC,CAA+C;AACnD,EAAA,OAAO,GAAA;AACL,WAAO,QAAQ,MAAM,OAAN,EAAe,QAA9B;AACD;;AAED,EAAA,kBAAkB,GAAA;AAChB,UAAM,QAAQ,GAAG,MAAM,kBAAN,EAAjB;AACA,UAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,UAA3B;AACA,IAAA,OAAO,CAAC,WAAR,CAAoB,UAApB;AACA,4BAAc,OAAd,EAAuB,UAAU,CAAC,UAAlC;AACA,WAAO,QAAP;AACD;;AAZkD;;;;;;;;;;;ACtErD;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAxBA;;;;;;;;;;;;;;AAcA;;;AAYO,MAAM,WAAW,GAAI,KAAD,IACtB,KAAK,KAAK,IAAV,IACA,EAAE,OAAO,KAAP,KAAiB,QAAjB,IAA6B,OAAO,KAAP,KAAiB,UAAhD,CAFE;AAIP;;;;;;;;AAIM,MAAO,kBAAP,CAAyB;AAO7B,EAAA,WAAA,CAAY,OAAZ,EAA8B,IAA9B,EAA4C,OAA5C,EAA6D;AAF7D,SAAA,KAAA,GAAQ,IAAR;AAGE,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,KAAL,GAAa,EAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAAR,GAAiB,CAArC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,WAAK,KAAL,CAAW,CAAX,IAAgB,KAAK,WAAL,EAAhB;AACD;AACF;AAED;;;;;AAGU,EAAA,WAAW,GAAA;AACnB,WAAO,IAAI,aAAJ,CAAkB,IAAlB,CAAP;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,UAAM,OAAO,GAAG,KAAK,OAArB;AACA,UAAM,CAAC,GAAG,OAAO,CAAC,MAAR,GAAiB,CAA3B;AACA,QAAI,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,MAAA,IAAI,IAAI,OAAO,CAAC,CAAD,CAAf;AACA,YAAM,IAAI,GAAG,KAAK,KAAL,CAAW,CAAX,CAAb;;AACA,UAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,cAAM,CAAC,GAAG,IAAI,CAAC,KAAf;;AACA,YAAI,CAAC,IAAI,IAAL,KACC,KAAK,CAAC,OAAN,CAAc,CAAd,KAAoB,OAAO,CAAP,KAAa,QAAb,IAAyB,CAAC,CAAC,MAAM,CAAC,QAAR,CAD/C,CAAJ,EACuE;AACrE,eAAK,MAAM,CAAX,IAAgB,CAAhB,EAAmB;AACjB,YAAA,IAAI,IAAI,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,MAAM,CAAC,CAAD,CAA1C;AACD;AACF,SALD,MAKO;AACL,UAAA,IAAI,IAAI,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,MAAM,CAAC,CAAD,CAA1C;AACD;AACF;AACF;;AAED,IAAA,IAAI,IAAI,OAAO,CAAC,CAAD,CAAf;AACA,WAAO,IAAP;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,OAAL,CAAa,YAAb,CAA0B,KAAK,IAA/B,EAAqC,KAAK,SAAL,EAArC;AACD;AACF;;AAtD4B;;;;AAyDzB,MAAO,aAAP,CAAoB;AAIxB,EAAA,WAAA,CAAY,QAAZ,EAAwC;AAFxC,SAAA,KAAA,GAAa,SAAb;AAGE,SAAK,SAAL,GAAiB,QAAjB;AACD;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAW;AACjB,QAAI,KAAK,KAAK,cAAV,KAAuB,CAAC,WAAW,CAAC,KAAD,CAAZ,IAAuB,KAAK,KAAK,KAAK,KAA7D,CAAJ,EAAyE;AACvE,WAAK,KAAL,GAAa,KAAb,CADuE,CAEvE;AACA;AACA;;AACA,UAAI,CAAC,4BAAY,KAAZ,CAAL,EAAyB;AACvB,aAAK,SAAL,CAAe,KAAf,GAAuB,IAAvB;AACD;AACF;AACF;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,4BAAY,KAAK,KAAjB,CAAP,EAAgC;AAC9B,YAAM,SAAS,GAAG,KAAK,KAAvB;AACA,WAAK,KAAL,GAAa,cAAb;AACA,MAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACD,QAAI,KAAK,KAAL,KAAe,cAAnB,EAA6B;AAC3B;AACD;;AACD,SAAK,SAAL,CAAe,MAAf;AACD;;AA9BuB;;;;AAiCpB,MAAO,QAAP,CAAe;AAOnB,EAAA,WAAA,CAAY,OAAZ,EAAkC;AAHlC,SAAA,KAAA,GAAa,SAAb;AACA,SAAA,aAAA,GAAqB,SAArB;AAGE,SAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;AAKA,EAAA,UAAU,CAAC,SAAD,EAAgB;AACxB,SAAK,SAAL,GAAiB,SAAS,CAAC,WAAV,CAAsB,6BAAtB,CAAjB;AACA,SAAK,OAAL,GAAe,SAAS,CAAC,WAAV,CAAsB,6BAAtB,CAAf;AACD;AAED;;;;;;;;;AAOA,EAAA,eAAe,CAAC,GAAD,EAAU;AACvB,SAAK,SAAL,GAAiB,GAAjB;AACA,SAAK,OAAL,GAAe,GAAG,CAAC,WAAnB;AACD;AAED;;;;;;;AAKA,EAAA,cAAc,CAAC,IAAD,EAAe;AAC3B,IAAA,IAAI,CAAC,OAAL,CAAa,KAAK,SAAL,GAAiB,6BAA9B;;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,KAAK,OAAL,GAAe,6BAA5B;AACD;AAED;;;;;;;AAKA,EAAA,eAAe,CAAC,GAAD,EAAc;AAC3B,IAAA,GAAG,CAAC,OAAJ,CAAY,KAAK,SAAL,GAAiB,6BAA7B;;AACA,SAAK,OAAL,GAAe,GAAG,CAAC,OAAnB;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,KAAK,SAAnB;AACD;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAW;AACjB,SAAK,aAAL,GAAqB,KAArB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,4BAAY,KAAK,aAAjB,CAAP,EAAwC;AACtC,YAAM,SAAS,GAAG,KAAK,aAAvB;AACA,WAAK,aAAL,GAAqB,cAArB;AACA,MAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACD,UAAM,KAAK,GAAG,KAAK,aAAnB;;AACA,QAAI,KAAK,KAAK,cAAd,EAAwB;AACtB;AACD;;AACD,QAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACtB,UAAI,KAAK,KAAK,KAAK,KAAnB,EAA0B;AACxB,aAAK,WAAL,CAAiB,KAAjB;AACD;AACF,KAJD,MAIO,IAAI,KAAK,YAAY,8BAArB,EAAqC;AAC1C,WAAK,qBAAL,CAA2B,KAA3B;AACD,KAFM,MAEA,IAAI,KAAK,YAAY,IAArB,EAA2B;AAChC,WAAK,WAAL,CAAiB,KAAjB;AACD,KAFM,MAEA,IAAI,KAAK,CAAC,OAAN,CAAc,KAAd,KAAwB,KAAK,CAAC,MAAM,CAAC,QAAR,CAAjC,EAAoD;AACzD,WAAK,eAAL,CAAqB,KAArB;AACD,KAFM,MAEA,IAAI,KAAK,KAAK,aAAd,EAAuB;AAC5B,WAAK,KAAL,GAAa,aAAb;AACA,WAAK,KAAL;AACD,KAHM,MAGA;AACL;AACA,WAAK,WAAL,CAAiB,KAAjB;AACD;AACF;;AAEO,EAAA,OAAO,CAAC,IAAD,EAAW;AACxB,SAAK,OAAL,CAAa,UAAb,CAAyB,YAAzB,CAAsC,IAAtC,EAA4C,KAAK,OAAjD;AACD;;AAEO,EAAA,WAAW,CAAC,KAAD,EAAY;AAC7B,QAAI,KAAK,KAAL,KAAe,KAAnB,EAA0B;AACxB;AACD;;AACD,SAAK,KAAL;;AACA,SAAK,OAAL,CAAa,KAAb;;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;AAEO,EAAA,WAAW,CAAC,KAAD,EAAc;AAC/B,UAAM,IAAI,GAAG,KAAK,SAAL,CAAe,WAA5B;AACA,IAAA,KAAK,GAAG,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqB,KAA7B;;AACA,QAAI,IAAI,KAAK,KAAK,OAAL,CAAa,eAAtB,IACA,IAAI,CAAC,QAAL,KAAkB;AAAE;AADxB,MAC8C;AAC5C;AACA;AACA;AACC,QAAA,IAAa,CAAC,IAAd,GAAqB,KAArB;AACF,OAND,MAMO;AACL,WAAK,WAAL,CAAiB,QAAQ,CAAC,cAAT,CACb,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAA5B,GAAoC,MAAM,CAAC,KAAD,CAD7B,CAAjB;AAED;;AACD,SAAK,KAAL,GAAa,KAAb;AACD;;AAEO,EAAA,qBAAqB,CAAC,KAAD,EAAsB;AACjD,UAAM,QAAQ,GAAG,KAAK,OAAL,CAAa,eAAb,CAA6B,KAA7B,CAAjB;;AACA,QAAI,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,QAAX,KAAwB,QAA1C,EAAoD;AAClD,WAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,MAAxB;AACD,KAFD,MAEO;AACL;AACA;AACA;AACA;AACA,YAAM,QAAQ,GACV,IAAI,kCAAJ,CAAqB,QAArB,EAA+B,KAAK,CAAC,SAArC,EAAgD,KAAK,OAArD,CADJ;;AAEA,YAAM,QAAQ,GAAG,QAAQ,CAAC,MAAT,EAAjB;;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,KAAK,CAAC,MAAtB;;AACA,WAAK,WAAL,CAAiB,QAAjB;;AACA,WAAK,KAAL,GAAa,QAAb;AACD;AACF;;AAEO,EAAA,eAAe,CAAC,KAAD,EAAW;AAChC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAK,KAAnB,CAAL,EAAgC;AAC9B,WAAK,KAAL,GAAa,EAAb;AACA,WAAK,KAAL;AACD,KAd+B,CAgBhC;AACA;;;AACA,UAAM,SAAS,GAAG,KAAK,KAAvB;AACA,QAAI,SAAS,GAAG,CAAhB;AACA,QAAI,QAAJ;;AAEA,SAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB;AACA,MAAA,QAAQ,GAAG,SAAS,CAAC,SAAD,CAApB,CAFwB,CAIxB;;AACA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,QAAQ,GAAG,IAAI,QAAJ,CAAa,KAAK,OAAlB,CAAX;AACA,QAAA,SAAS,CAAC,IAAV,CAAe,QAAf;;AACA,YAAI,SAAS,KAAK,CAAlB,EAAqB;AACnB,UAAA,QAAQ,CAAC,cAAT,CAAwB,IAAxB;AACD,SAFD,MAEO;AACL,UAAA,QAAQ,CAAC,eAAT,CAAyB,SAAS,CAAC,SAAS,GAAG,CAAb,CAAlC;AACD;AACF;;AACD,MAAA,QAAQ,CAAC,QAAT,CAAkB,IAAlB;AACA,MAAA,QAAQ,CAAC,MAAT;AACA,MAAA,SAAS;AACV;;AAED,QAAI,SAAS,GAAG,SAAS,CAAC,MAA1B,EAAkC;AAChC;AACA,MAAA,SAAS,CAAC,MAAV,GAAmB,SAAnB;AACA,WAAK,KAAL,CAAW,QAAQ,IAAI,QAAS,CAAC,OAAjC;AACD;AACF;;AAED,EAAA,KAAK,CAAC,SAAA,GAAkB,KAAK,SAAxB,EAAiC;AACpC,0BACI,KAAK,SAAL,CAAe,UADnB,EACgC,SAAS,CAAC,WAD1C,EACwD,KAAK,OAD7D;AAED;;AAzLkB;AA4LrB;;;;;;;;;;;AAOM,MAAO,oBAAP,CAA2B;AAO/B,EAAA,WAAA,CAAY,OAAZ,EAA8B,IAA9B,EAA4C,OAA5C,EAA6D;AAH7D,SAAA,KAAA,GAAa,SAAb;AACA,SAAA,aAAA,GAAqB,SAArB;;AAGE,QAAI,OAAO,CAAC,MAAR,KAAmB,CAAnB,IAAwB,OAAO,CAAC,CAAD,CAAP,KAAe,EAAvC,IAA6C,OAAO,CAAC,CAAD,CAAP,KAAe,EAAhE,EAAoE;AAClE,YAAM,IAAI,KAAJ,CACF,yDADE,CAAN;AAED;;AACD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAW;AACjB,SAAK,aAAL,GAAqB,KAArB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,4BAAY,KAAK,aAAjB,CAAP,EAAwC;AACtC,YAAM,SAAS,GAAG,KAAK,aAAvB;AACA,WAAK,aAAL,GAAqB,cAArB;AACA,MAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACD,QAAI,KAAK,aAAL,KAAuB,cAA3B,EAAqC;AACnC;AACD;;AACD,UAAM,KAAK,GAAG,CAAC,CAAC,KAAK,aAArB;;AACA,QAAI,KAAK,KAAL,KAAe,KAAnB,EAA0B;AACxB,UAAI,KAAJ,EAAW;AACT,aAAK,OAAL,CAAa,YAAb,CAA0B,KAAK,IAA/B,EAAqC,EAArC;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,eAAb,CAA6B,KAAK,IAAlC;AACD;AACF;;AACD,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,aAAL,GAAqB,cAArB;AACD;;AAxC8B;AA2CjC;;;;;;;;;;;;;AASM,MAAO,iBAAP,SAAiC,kBAAjC,CAAmD;AAGvD,EAAA,WAAA,CAAY,OAAZ,EAA8B,IAA9B,EAA4C,OAA5C,EAA6D;AAC3D,UAAM,OAAN,EAAe,IAAf,EAAqB,OAArB;AACA,SAAK,MAAL,GACK,OAAO,CAAC,MAAR,KAAmB,CAAnB,IAAwB,OAAO,CAAC,CAAD,CAAP,KAAe,EAAvC,IAA6C,OAAO,CAAC,CAAD,CAAP,KAAe,EADjE;AAED;;AAES,EAAA,WAAW,GAAA;AACnB,WAAO,IAAI,YAAJ,CAAiB,IAAjB,CAAP;AACD;;AAED,EAAA,SAAS,GAAA;AACP,QAAI,KAAK,MAAT,EAAiB;AACf,aAAO,KAAK,KAAL,CAAW,CAAX,EAAc,KAArB;AACD;;AACD,WAAO,MAAM,SAAN,EAAP;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,KAAL,GAAa,KAAb;AACC,WAAK,OAAL,CAAqB,KAAK,IAA1B,IAAkC,KAAK,SAAL,EAAlC;AACF;AACF;;AAzBsD;;;;AA4BnD,MAAO,YAAP,SAA4B,aAA5B,CAAyC,GAE/C;AACA;AACA;AACA;;;;AACA,IAAI,qBAAqB,GAAG,KAA5B;;AAEA,IAAI;AACF,QAAM,OAAO,GAAG;AACd,QAAI,OAAJ,GAAW;AACT,MAAA,qBAAqB,GAAG,IAAxB;AACA,aAAO,KAAP;AACD;;AAJa,GAAhB;AAMA,EAAA,MAAM,CAAC,gBAAP,CAAwB,MAAxB,EAAgC,OAAhC,EAAgD,OAAhD;AACA,EAAA,MAAM,CAAC,mBAAP,CAA2B,MAA3B,EAAmC,OAAnC,EAAmD,OAAnD;AACD,CATD,CASE,OAAO,EAAP,EAAW,CACZ;;AAEK,MAAO,SAAP,CAAgB;AASpB,EAAA,WAAA,CAAY,OAAZ,EAA8B,SAA9B,EAAiD,YAAjD,EAA2E;AAL3E,SAAA,KAAA,GAAa,SAAb;AAEA,SAAA,aAAA,GAAqB,SAArB;AAIE,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,YAAL,GAAoB,YAApB;;AACA,SAAK,iBAAL,GAA0B,CAAD,IAAO,KAAK,WAAL,CAAiB,CAAjB,CAAhC;AACD;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAW;AACjB,SAAK,aAAL,GAAqB,KAArB;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,4BAAY,KAAK,aAAjB,CAAP,EAAwC;AACtC,YAAM,SAAS,GAAG,KAAK,aAAvB;AACA,WAAK,aAAL,GAAqB,cAArB;AACA,MAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACD,QAAI,KAAK,aAAL,KAAuB,cAA3B,EAAqC;AACnC;AACD;;AAED,UAAM,WAAW,GAAG,KAAK,aAAzB;AACA,UAAM,WAAW,GAAG,KAAK,KAAzB;AACA,UAAM,oBAAoB,GAAG,WAAW,IAAI,IAAf,IACzB,WAAW,IAAI,IAAf,KACK,WAAW,CAAC,OAAZ,KAAwB,WAAW,CAAC,OAApC,IACA,WAAW,CAAC,IAAZ,KAAqB,WAAW,CAAC,IADjC,IAEA,WAAW,CAAC,OAAZ,KAAwB,WAAW,CAAC,OAHzC,CADJ;AAKA,UAAM,iBAAiB,GACnB,WAAW,IAAI,IAAf,KAAwB,WAAW,IAAI,IAAf,IAAuB,oBAA/C,CADJ;;AAGA,QAAI,oBAAJ,EAA0B;AACxB,WAAK,OAAL,CAAa,mBAAb,CACI,KAAK,SADT,EACoB,KAAK,iBADzB,EAC4C,KAAK,QADjD;AAED;;AACD,QAAI,iBAAJ,EAAuB;AACrB,WAAK,QAAL,GAAgB,UAAU,CAAC,WAAD,CAA1B;AACA,WAAK,OAAL,CAAa,gBAAb,CACI,KAAK,SADT,EACoB,KAAK,iBADzB,EAC4C,KAAK,QADjD;AAED;;AACD,SAAK,KAAL,GAAa,WAAb;AACA,SAAK,aAAL,GAAqB,cAArB;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAa;AACtB,QAAI,OAAO,KAAK,KAAZ,KAAsB,UAA1B,EAAsC;AACpC,WAAK,KAAL,CAAW,IAAX,CAAgB,KAAK,YAAL,IAAqB,KAAK,OAA1C,EAAmD,KAAnD;AACD,KAFD,MAEO;AACL,WAAK,KAAL,CAAW,WAAX,CAAuB,KAAvB;AACD;AACF;;AA3DmB,EA8DtB;AACA;AACA;;;;;AACA,MAAM,UAAU,GAAI,CAAD,IAAY,CAAC,KAC3B,qBAAqB,GACjB;AAAC,EAAA,OAAO,EAAE,CAAC,CAAC,OAAZ;AAAqB,EAAA,OAAO,EAAE,CAAC,CAAC,OAAhC;AAAyC,EAAA,IAAI,EAAE,CAAC,CAAC;AAAjD,CADiB,GAEjB,CAAC,CAAC,OAHqB,CAAhC;;;;;;;;;ACjdA;;AAnBA;;;;;;;;;;;;;;AAuBA;;;AAGM,MAAO,wBAAP,CAA+B;AACnC;;;;;;;;;AASA,EAAA,0BAA0B,CACtB,OADsB,EACJ,IADI,EACU,OADV,EAEtB,OAFsB,EAEA;AACxB,UAAM,MAAM,GAAG,IAAI,CAAC,CAAD,CAAnB;;AACA,QAAI,MAAM,KAAK,GAAf,EAAoB;AAClB,YAAM,QAAQ,GAAG,IAAI,wBAAJ,CAAsB,OAAtB,EAA+B,IAAI,CAAC,KAAL,CAAW,CAAX,CAA/B,EAA8C,OAA9C,CAAjB;AACA,aAAO,QAAQ,CAAC,KAAhB;AACD;;AACD,QAAI,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAO,CAAC,IAAI,gBAAJ,CAAc,OAAd,EAAuB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAvB,EAAsC,OAAO,CAAC,YAA9C,CAAD,CAAP;AACD;;AACD,QAAI,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAO,CAAC,IAAI,2BAAJ,CAAyB,OAAzB,EAAkC,IAAI,CAAC,KAAL,CAAW,CAAX,CAAlC,EAAiD,OAAjD,CAAD,CAAP;AACD;;AACD,UAAM,QAAQ,GAAG,IAAI,yBAAJ,CAAuB,OAAvB,EAAgC,IAAhC,EAAsC,OAAtC,CAAjB;AACA,WAAO,QAAQ,CAAC,KAAhB;AACD;AACD;;;;;;AAIA,EAAA,oBAAoB,CAAC,OAAD,EAAuB;AACzC,WAAO,IAAI,eAAJ,CAAa,OAAb,CAAP;AACD;;AAjCkC;;;AAoC9B,MAAM,wBAAwB,GAAG,IAAI,wBAAJ,EAAjC;;;;;;;;;;;AC3CP;;AAnBA;;;;;;;;;;;;;;AA2CA;;;;AAIM,SAAU,eAAV,CAA0B,MAA1B,EAAgD;AACpD,MAAI,aAAa,GAAG,cAAc,CAAC,GAAf,CAAmB,MAAM,CAAC,IAA1B,CAApB;;AACA,MAAI,aAAa,KAAK,SAAtB,EAAiC;AAC/B,IAAA,aAAa,GAAG;AACd,MAAA,YAAY,EAAE,IAAI,OAAJ,EADA;AAEd,MAAA,SAAS,EAAE,IAAI,GAAJ;AAFG,KAAhB;AAIA,IAAA,cAAc,CAAC,GAAf,CAAmB,MAAM,CAAC,IAA1B,EAAgC,aAAhC;AACD;;AAED,MAAI,QAAQ,GAAG,aAAa,CAAC,YAAd,CAA2B,GAA3B,CAA+B,MAAM,CAAC,OAAtC,CAAf;;AACA,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,WAAO,QAAP;AACD,GAbmD,CAepD;AACA;;;AACA,QAAM,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,IAAf,CAAoB,gBAApB,CAAZ,CAjBoD,CAmBpD;;AACA,EAAA,QAAQ,GAAG,aAAa,CAAC,SAAd,CAAwB,GAAxB,CAA4B,GAA5B,CAAX;;AACA,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B;AACA,IAAA,QAAQ,GAAG,IAAI,kBAAJ,CAAa,MAAb,EAAqB,MAAM,CAAC,kBAAP,EAArB,CAAX,CAF0B,CAG1B;;AACA,IAAA,aAAa,CAAC,SAAd,CAAwB,GAAxB,CAA4B,GAA5B,EAAiC,QAAjC;AACD,GA1BmD,CA4BpD;;;AACA,EAAA,aAAa,CAAC,YAAd,CAA2B,GAA3B,CAA+B,MAAM,CAAC,OAAtC,EAA+C,QAA/C;AACA,SAAO,QAAP;AACD;;AAiBM,MAAM,cAAc,GAAG,IAAI,GAAJ,EAAvB;;;;;;;;;;AC7EP;;AACA;;AAEA;;AArBA;;;;;;;;;;;;;;AAcA;;;AAUO,MAAM,KAAK,GAAG,IAAI,OAAJ,EAAd;AAEP;;;;;;;;;;;;;;;;;;AAeO,MAAM,MAAM,GACf,CAAC,MAAD,EACC,SADD,EAEC,OAFD,KAEqC;AACnC,MAAI,IAAI,GAAG,KAAK,CAAC,GAAN,CAAU,SAAV,CAAX;;AACA,MAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,0BAAY,SAAZ,EAAuB,SAAS,CAAC,UAAjC;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,SAAV,EAAqB,IAAI,GAAG,IAAI,eAAJ,CAAY,MAAA,CAAA,MAAA,CAAA;AACjB,MAAA,eAAe,EAAf;AADiB,KAAA,EAEd,OAFc,CAAZ,CAA5B;AAIA,IAAA,IAAI,CAAC,UAAL,CAAgB,SAAhB;AACD;;AACD,EAAA,IAAI,CAAC,QAAL,CAAc,MAAd;AACA,EAAA,IAAI,CAAC,MAAL;AACD,CAfE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTP;;AACA;;AAGA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAGA;;AA/CA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;AAcA;;;;AASA;;AAYA;;;;AAIO,MAAM,IAAI,GAAG,CAAC,OAAD,EAAgC,GAAG,MAAnC,KAChB,IAAI,8BAAJ,CAAmB,OAAnB,EAA4B,MAA5B,EAAoC,MAApC,EAA4C,kDAA5C,CADG;AAGP;;;;;;;;AAIO,MAAM,GAAG,GAAG,CAAC,OAAD,EAAgC,GAAG,MAAnC,KACf,IAAI,iCAAJ,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC,KAAvC,EAA8C,kDAA9C,CADG;;;;;;AC1DP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,CAAC;AAAA,aAAIC,aAAJ;AAAA,CAAf;;AAMA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAF,CAAC;AAAA,aAAIC,aAAJ;AAAA,CAAd;;AAIA,IAAME,MAAM,GAAG,SAATA,MAAS,CAAAH,CAAC;AAAA,aAAIC,aAAJ;AAAA,CAAhB;;AAIA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAAJ,CAAC;AAAA,aAAIC,aAAJ;AAAA,CAAjB;;AAWA,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAAAL,CAAC;AAAA,aAAIC,aAAJ,sBAETF,KAAK,EAFI,EAIPG,IAAI,EAJG,EAOPC,MAAM,EAPC,EAQPC,OAAO,EARA,EAWPD,MAAM,EAXC,EAYPC,OAAO,EAZA;AAAA,CAAf;;AAiBAE,MAAM,CAACC,GAAP,GAAa;AACXC,EAAAA,KADW,mBACH;AACN,yBAAOH,KAAK,EAAZ,EAAgBI,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAhB;AACD;AAHU,CAAb","file":"src.7ed060e2.map","sourceRoot":"../static","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<any, Boolean>();\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\nexport const directive = <F extends Function>(f: F): F =>\n    ((...args: any[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as unknown as F;\n\nexport const isDirective = (o: any) =>\n    typeof o === 'function' && directives.has(o);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as any).polyfillWrapFlushCallback !== undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: any;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: any): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null as any,\n          false);\n      // Keeps track of the last index associated with a part. We try to delete\n      // unnecessary nodes, but we never want to associate two different parts\n      // to the same index. They must have a constant node between.\n      let lastPartIndex = 0;\n      while (walker.nextNode()) {\n        index++;\n        const node = walker.currentNode as Element | Comment | Text;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if ((node as Element).hasAttributes()) {\n            const attributes = (node as Element).attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName =\n                  name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue =\n                  (node as Element).getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              (node as Element).removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if ((node as Element).tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const data = (node as Text).data!;\n          if (data.indexOf(marker) >= 0) {\n            const parent = node.parentNode!;\n            const strings = data.split(markerRegex);\n            const lastIndex = strings.length - 1;\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            for (let i = 0; i < lastIndex; i++) {\n              parent.insertBefore(\n                  (strings[i] === '') ? createMarker() :\n                                        document.createTextNode(strings[i]),\n                  node);\n              this.parts.push({type: 'node', index: ++index});\n            }\n            // If there's no text, we must insert a comment to mark our place.\n            // Else, we can trust it will stick around after cloning.\n            if (strings[lastIndex] === '') {\n              parent.insertBefore(createMarker(), node);\n              nodesToRemove.push(node);\n            } else {\n              (node as Text).data = strings[lastIndex];\n            }\n            // We have a part for each match found\n            partIndex += lastIndex;\n          }\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if ((node as Comment).data === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * The previousSibling is already the start of a previous part\n            if (node.previousSibling === null || index === lastPartIndex) {\n              index++;\n              parent.insertBefore(createMarker(), node);\n            }\n            lastPartIndex = index;\n            this.parts.push({type: 'node', index});\n            // If we don't have a nextSibling, keep this node so we have an end.\n            // Else, we can remove it to save future costs.\n            if (node.nextSibling === null) {\n              (node as Comment).data = '';\n            } else {\n              nodesToRemove.push(node);\n              index--;\n            }\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = (node as Comment).data!.indexOf(marker, i + 1)) !==\n                   -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: any[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null as any,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node.previousSibling!);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: any[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: any[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const endIndex = this.strings.length - 1;\n    let html = '';\n    for (let i = 0; i < endIndex; i++) {\n      const s = this.strings[i];\n      // This exec() call does two things:\n      // 1) Appends a suffix to the bound attribute name to opt out of special\n      // attribute value parsing that IE11 and Edge do, like for style and\n      // many SVG attributes. The Template class also appends the same suffix\n      // when looking up attributes to create Parts.\n      // 2) Adds an unquoted-attribute-safe marker for the first expression in\n      // an attribute. Subsequent attribute expressions will use node markers,\n      // and this is safe since attributes with multiple expressions are\n      // guaranteed to be quoted.\n      const match = lastAttributeNameRegex.exec(s);\n      if (match) {\n        // We're starting a new bound attribute.\n        // Add the safe attribute suffix, and use unquoted-attribute-safe\n        // marker.\n        html += s.substr(0, match.index) + match[1] + match[2] +\n            boundAttributeSuffix + match[3] + marker;\n      } else {\n        // We're either in a bound node, or trailing bound attribute.\n        // Either way, nodeMarker is safe to use.\n        html += s + nodeMarker;\n      }\n    }\n    return html + this.strings[endIndex];\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\nexport const isPrimitive = (value: any) =>\n    (value === null ||\n     !(typeof value === 'object' || typeof value === 'function'));\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): any {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue());\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: any = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: any): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: any = undefined;\n  _pendingValue: any = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (Array.isArray(value) || value[Symbol.iterator]) {\n      this._commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: string): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = value;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value && this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: any): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: any = undefined;\n  _pendingValue: any = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  window.addEventListener('test', options as any, options);\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: any = undefined;\n  _options?: AddEventListenerOptions;\n  _pendingValue: any = undefined;\n  _boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this._boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: any): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    if (shouldAddListener) {\n      this._options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      this.value.handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: any) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  stringsArray: WeakMap<TemplateStringsArray, Template>;\n  keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","// @flow\n\nimport { html, render } from 'lit-html';\n\nconst title = _ => html`\n  <h1 class=\"index__title\">\n    <a class=\"index__title-link\">Galactic Pigs: A Prelude</a>\n  </h1>\n`;\n\nconst text = _ => html`\n  <div class=\"index__text\">ye olde text</div>\n`;\n\nconst prompt = _ => html`\n  <div class=\"index__prompt\">Whitch will it be?</div>\n`;\n\nconst choices = _ => html`\n  <div class=\"index__choices\">\n    <div class=\"index_choice\">\n      <a class=\"index__choice-button\">option a</a>\n    </div>\n    <div class=\"index__choice\">\n      <a class=\"index__choice-button\">option b</a>\n    </div>\n  </div>\n`;\n\nconst index = _ => html`\n  <div class=\"index\">\n    ${title()}\n    <div class=\"index__body\">\n      ${text()}\n    </div>\n    <div class=\"index__footer\" aria-hidden=\"true\">\n      ${prompt()}\n      ${choices()}\n    </div>\n    <div class=\"index__footer index__footer--overlay\">\n      ${prompt()}\n      ${choices()}\n    </div>\n  </div>\n`;\n\nwindow.App = {\n  start() {\n    render(index(), document.getElementById('app'));\n  }\n}"]}